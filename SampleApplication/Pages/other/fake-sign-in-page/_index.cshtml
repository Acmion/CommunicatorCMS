@page

<h1>Signed In</h1>

@{
    var claims = new List<Claim>
{
        new Claim(ClaimTypes.Name, "HELO WORLD"),
        new Claim(ClaimTypes.Role, "Administrator"),
        new Claim(ClaimTypes.Role, "User"),
    };

    var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

    var authProperties = new AuthenticationProperties
    {
        AllowRefresh = true,
        ExpiresUtc = DateTimeOffset.UtcNow.AddHours(12),
        // The time at which the authentication ticket expires. A
        // value set here overrides the ExpireTimeSpan option of
        // CookieAuthenticationOptions set with AddCookie.

        //IsPersistent = true,
        // Whether the authentication session is persisted across
        // multiple requests. When used with cookies, controls
        // whether the cookie's lifetime is absolute (matching the
        // lifetime of the authentication ticket) or session-based.

        IssuedUtc = DateTimeOffset.UtcNow,
        // The time at which the authentication ticket was issued.

        //RedirectUri = <string>
        // The full path or absolute URI to be used as an http
        // redirect response value.
    };

    await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimsIdentity), authProperties);
}

@foreach (var v in HttpContext.User.Claims) 
{
    @v.Type @v.Value
    <br />
}

@HttpContext.User.Identity.IsAuthenticated