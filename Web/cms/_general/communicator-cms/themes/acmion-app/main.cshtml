@using System.Net.Http;
@using Markdig;
@using CommunicatorCms;
@using CommunicatorCms.Core;
@using CommunicatorCms.Core.Settings;
@using CommunicatorCms.Core.Actions;
@using CommunicatorCms.Core.Application.FileSystem;
@using CommunicatorCms.Core.Application.Pages;
@using System.Diagnostics;

@model AppPageModelAndBody
@inject RequestState RequestState

@{
    var currentPage = await RequestState.GetCurrentPage();
    var currentActiveTopPage = await App.Pages.GetByUrl(AppPath.GetUrlWithMaxNumberOfSlashes(currentPage.PageUrl, 2));

}


<div class="d-flex position-relative align-items-stretch w-100">
    @{
        if (currentPage.Properties.ShowSideNavigationMenu)
        {
            <div class="side-nav-container">
                <nav class="hn-menu hn-menu-no-focus hn-side hn-height-100">
                    <input type="checkbox" class="hn-input-state hn-input-state-nav hn-hide-mobile" id="hn-side-desktop-cb" checked>
                    <input type="checkbox" class="hn-input-state hn-input-state-nav hn-hide-desktop" id="hn-side-mobile-cb">
                    <div class="hn-nav">
                        <div class="hn-section hn-section-body">
                            <label class="hn-item hn-input hn-input-nav hn-hide-desktop" for="hn-side-mobile-cb">
                                <span class="hn-link">
                                    <span class="hn-icon">
                                        <span class="hn-input-default">
                                            <i class="ri-logout-box-r-line"></i>
                                        </span>
                                        <span class="hn-input-active">
                                            <i class="ri-logout-box-line"></i>
                                        </span>
                                    </span>
                                    <span class="hn-content">
                                        Collapse
                                    </span>
                                </span>
                            </label>
                            <label class="hn-item hn-input hn-input-nav hn-hide-mobile" for="hn-side-desktop-cb">
                                <span class="hn-link">
                                    <span class="hn-icon">
                                        <span class="hn-input-default">
                                            <i class="ri-logout-box-r-line"></i>
                                        </span>
                                        <span class="hn-input-active">
                                            <i class="ri-logout-box-line"></i>
                                        </span>
                                    </span>
                                    <span class="hn-content">
                                        Collapse
                                    </span>
                                </span>
                            </label>
                            @{
                                @await App.Extensions.HyperNav.RenderCommunicatorCmsNavLayout(currentActiveTopPage, RequestState, "side-nav-cb", false, false, true, 0)

                                var topPages = await currentActiveTopPage.GetSubPages();

                                for (var i = 0; i < topPages.Count; i++)
                                {
                                    @await App.Extensions.HyperNav.RenderCommunicatorCmsNavLayout(topPages[i], RequestState, "side-nav-cb" + i, true, false, true, int.MaxValue)
                                }

                            }
                        </div>
                    </div>

                    <label class="hn-overlay hn-hide-desktop" style="z-index: -1" for="hn-side-mobile-cb">
                    </label>
                </nav>
            </div>
        }
    }
    <div class="page-content-container flex-grow-1">
        <div class="page-shadow-top"></div>
        <div class="page-shadow-right"></div>
        <div class="page-shadow-bottom"></div>
        <div class="page-shadow-bottom-touch-device"></div>
        <div class="page-shadow-left"></div>

        <div class="page-header-container mb-2 p-4 pb-0">
            <a class="page-header-title h1 m-0 d-flex" href="@currentPage.PageUrl@RequestState.HttpRequest.QueryString">
                @if (!string.IsNullOrEmpty(currentPage.Properties.Icon))
                {
                    <span class="title-icon d-flex">
                        @Html.Raw(currentPage.Properties.Icon)
                    </span>
                }

                @if (RequestState.HasQueryTitles)
                {
                    <span class="title-title">
                        @RequestState.GetQueryTitles().Last()
                    </span>
                }
                else
                {
                    <span class="title-title">
                        @currentPage.Properties.Title
                    </span>
                }
            </a>
            <div class="page-header-breadcrumb">
                @{
                    var appPage = currentPage;

                    var allParentPages = new List<AppPage>();

                    while (appPage.HasParentPage())
                    {
                        appPage = await appPage.GetParentPage();
                        allParentPages.Add(appPage);
                    }

                    allParentPages.Reverse();

                    foreach (var parentPage in allParentPages)
                    {
                        <a href="@parentPage.PageUrl">
                            @parentPage.Properties.Title
                        </a>
                        <span>
                            /
                        </span>
                    }

                    <a href="@currentPage.PageUrl">
                        @currentPage.Properties.Title
                    </a>

                    @if (RequestState.HasQueryPaths)
                    {

                        var parsedQueryString = HttpUtility.ParseQueryString(RequestState.HttpRequest.QueryString.Value);
                        parsedQueryString.Remove(QuerySettings.PathParameter);
                        parsedQueryString.Remove(QuerySettings.TitleParameter);

                        var queryPaths = RequestState.GetQueryPaths();
                        var queryTitles = RequestState.GetQueryTitles();

                        for (var i = 0; i < queryPaths.Count; i++)
                        {
                            var qp = queryPaths[i];
                            var qt = queryTitles[i];

                            parsedQueryString.Add(QuerySettings.PathParameter, qp);
                            parsedQueryString.Add(QuerySettings.TitleParameter, qt);

                            <span>
                                /
                            </span>

                            <a href="@currentPage.PageUrl@parsedQueryString.ToString()">
                                @qt
                            </a>
                        }
                    }
                }
            </div>
            <hr />
        </div>
        <div class="page-body-container p-4 pt-0 d-inline-block">
            @Model.Body

            @{
                await currentPage.Render(this, this.Html, Model.Model);
            }
        </div>

        <div class="page-extra">

        </div>
    </div>
</div>
